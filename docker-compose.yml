services:
  # PostgreSQL App DB (persistent storage for telemetry, metrics, alerts)
  iot-db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: iot_user
      POSTGRES_PASSWORD: iot_pass
      POSTGRES_DB: iot_health
    ports:
      - "5433:5432"  # Expose on 5433 to avoid conflict with first demo
    volumes:
      - iot_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iot-network

  # CadenzaDB (meta orchestration)
  cadenza-db-service:
    container_name: cadenza-db-service
    build:
      context: ./database  # Assume a shared database dir like first demo
      dockerfile: Dockerfile
    env_file:
      - ./database/.env
    environment:
      - DATABASE_ADDRESS=iot-db
      - DATABASE_PORT=5432
    depends_on:
      iot-db:
        condition: service_healthy
    volumes:
      - shared_telemetry:/shared
    working_dir: /app
    command: npm start
    networks:
      - iot-network

  # Application Database Service (Cadenza service for app DB interactions via DatabaseTasks)
  iot-db-service:
    container_name: iot-db-service
    build:
      context: ./database/iot-db-service
      dockerfile: Dockerfile
    env_file:
      - ./database/iot-db-service/.env
    environment:
      - DATABASE_ADDRESS=iot-db
      - DATABASE_PORT=5432
      - DATABASE_USER=iot_user
      - DATABASE_PASSWORD=iot_pass
      - DATABASE_NAME=iot_health
    depends_on:
      iot-db:
        condition: service_healthy
      cadenza-db-service:
        condition: service_started
    volumes:
      - shared_telemetry:/shared
    working_dir: /app
    command: npm start
    networks:
      - iot-network

  # Telemetry Collector Service (3 instances: ingests raw data)
  telemetry-collector:
    build:
      context: ./services/telemetry-collector
      dockerfile: Dockerfile
    env_file:
      - ./services/telemetry-collector/.env
    environment:
      - CADENZA_DB_ADDRESS=cadenza-db-service
      - CADENZA_DB_PORT=8080
    depends_on:
      - cadenza-db-service
      - iot-db-service
      - scheduled-runner
    volumes:
      - shared_telemetry:/shared
      - ./scripts:/scripts:ro
    working_dir: /app
    command: npm start
    networks:
      - iot-network

  # Anomaly Detector Service (4 instances: detects outliers)
  anomaly-detector:
    build:
      context: ./services/anomaly-detector
      dockerfile: Dockerfile
    env_file:
      - ./services/anomaly-detector/.env
    environment:
      - CADENZA_DB_ADDRESS=cadenza-db-service
      - CADENZA_DB_PORT=8080
      - IOT_DB_SERVICE_ADDRESS=iot-db-service
      - IOT_DB_SERVICE_PORT=3001
    depends_on:
      - cadenza-db-service
      - iot-db-service
      - scheduled-runner
    volumes:
      - shared_telemetry:/shared
      - ./scripts:/scripts:ro
    working_dir: /app
    command: npm start
    networks:
      - iot-network

  # Predictor Service (2 instances: forecasts failures)
  predictor:
    build:
      context: ./services/predictor
      dockerfile: Dockerfile
    env_file:
      - ./services/predictor/.env
    environment:
      - CADENZA_DB_ADDRESS=cadenza-db-service
      - CADENZA_DB_PORT=8080
    depends_on:
      - cadenza-db-service
      - iot-db-service
      - scheduled-runner
    volumes:
      - shared_telemetry:/shared
      - ./scripts:/scripts:ro
    working_dir: /app
    command: npm start
    networks:
      - iot-network

  # Alert Service (3 instances: generates notifications)
#  alert-service:
#    build:
#      context: ./services/alert-service
#      dockerfile: Dockerfile
#    env_file:
#      - ./services/alert-service/.env
#    environment:
#      - CADENZA_DB_ADDRESS=cadenza-db-service
#      - CADENZA_DB_PORT=8080
#      - IOT_DB_SERVICE_ADDRESS=iot-db-service
#      - IOT_DB_SERVICE_PORT=3001
#    depends_on:
#      - cadenza-db-service
#      - iot-db-service
#    volumes:
#      - shared_telemetry:/shared
#      - ./scripts:/scripts:ro
#    working_dir: /app
#    command: npm start
#    deploy:
#      replicas: 3
#    networks:
#      - iot-network

  # Scheduled Runner (1 instance: mocks device events)
  scheduled-runner:
    build:
      context: ./runner
      dockerfile: Dockerfile
    env_file:
      - ./runner/.env
    environment:
      - CADENZA_DB_ADDRESS=cadenza-db-service
      - CADENZA_DB_PORT=8080
      - TRAFFIC_MODE=low  # low|high
      - DEVICE_COUNT=50
    depends_on:
      - cadenza-db-service
      - iot-db-service
    volumes:
      - shared_telemetry:/shared
      - ./scripts:/scripts:ro
    working_dir: /app
    command: npm start
    networks:
      - iot-network

volumes:
  iot_pgdata:
  shared_telemetry:

networks:
  iot-network:
    driver: bridge